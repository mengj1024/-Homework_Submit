# Generated by Django 2.1.7 on 2019-04-03 07:34

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='abc',
            fields=[
                ('abc_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('abc_name', models.CharField(max_length=50, verbose_name='班级名字')),
            ],
            options={
                'verbose_name': '班级管理2',
                'verbose_name_plural': '班级管理2',
                'db_table': 'Grade_manage2',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('answer', models.CharField(max_length=500, verbose_name='回答内容')),
                ('answer_teacher', models.TextField(max_length=16000)),
                ('answer_grade', models.ForeignKey(blank=True, null=True, on_delete=None, to='Main.abc')),
            ],
            options={
                'verbose_name': '回复查看',
                'verbose_name_plural': '回复查看',
                'db_table': 'Answers',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('grade_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('grade_name', models.CharField(max_length=50, verbose_name='班级名字')),
            ],
            options={
                'verbose_name': '班级管理',
                'verbose_name_plural': '班级管理',
                'db_table': 'Grade_manage',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('major_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('major_name', models.CharField(max_length=50, verbose_name='专业名字')),
                ('grade_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': '专业管理',
                'verbose_name_plural': '专业管理',
                'db_table': 'Major_manage',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=500, verbose_name='问题内容')),
                ('question_grade', models.ForeignKey(blank=True, null=True, on_delete=None, to='Main.abc')),
            ],
            options={
                'verbose_name': '头脑风暴',
                'verbose_name_plural': '头脑风暴',
                'db_table': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('score_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('score', models.CharField(max_length=10, null=True, verbose_name='成绩')),
            ],
            options={
                'verbose_name': '成绩',
                'verbose_name_plural': '成绩',
                'db_table': 'Score',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('abc_stu', models.ManyToManyField(blank=True, null=True, to='Main.abc')),
            ],
            options={
                'verbose_name': '学生管理',
                'verbose_name_plural': '学生管理',
                'db_table': 'Student_manage',
            },
        ),
        migrations.CreateModel(
            name='submitselectgrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chioces', models.ForeignKey(null=True, on_delete=None, to='Main.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_uploadtime', models.DateTimeField(default=datetime.datetime.now, verbose_name='上传时间')),
                ('task_upload', models.ImageField(upload_to='作业/')),
                ('task_comment', models.CharField(blank=True, max_length=500, null=True)),
                ('task_img', models.TextField(blank=True, max_length=16000, null=True)),
                ('task_grade', models.ForeignKey(on_delete=None, to='Main.abc', verbose_name='作业的班级')),
                ('task_score', models.OneToOneField(blank=True, null=True, on_delete=None, to='Main.Score', verbose_name='作业分数')),
                ('task_uploadname', models.ForeignKey(blank=True, null=True, on_delete=None, to='Main.Student', verbose_name='上传用户')),
            ],
            options={
                'verbose_name': '作业管理',
                'verbose_name_plural': '作业管理',
                'db_table': 'Task_manage',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('teacher_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('teacher_grade', models.ManyToManyField(blank=True, to='Main.abc', verbose_name='班级')),
            ],
            options={
                'verbose_name': '老师管理',
                'verbose_name_plural': '老师管理',
                'db_table': 'Teacher_manage',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('thread_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('thread', models.TextField(max_length=16000)),
                ('thread_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.Answer')),
                ('thread_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.Question')),
            ],
            options={
                'verbose_name': '脑暴主线',
                'verbose_name_plural': '脑暴主线',
                'db_table': 'Thread',
            },
        ),
        migrations.CreateModel(
            name='ID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='昵称')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='thread',
            name='thread_who',
            field=models.ForeignKey(on_delete=None, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='teacher',
            name='teacher_user',
            field=models.OneToOneField(on_delete=None, to=settings.AUTH_USER_MODEL, verbose_name='账户'),
        ),
        migrations.AddField(
            model_name='student',
            name='student_user',
            field=models.OneToOneField(on_delete=None, to=settings.AUTH_USER_MODEL, verbose_name='账户'),
        ),
        migrations.AddField(
            model_name='question',
            name='question_who',
            field=models.ForeignKey(on_delete=None, to='Main.Teacher'),
        ),
        migrations.AddField(
            model_name='answer',
            name='answer_who',
            field=models.ForeignKey(on_delete=None, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.Question'),
        ),
    ]
