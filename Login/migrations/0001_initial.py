# Generated by Django 2.1.7 on 2019-03-15 17:01

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='chengji',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_name', models.CharField(blank=True, max_length=50, verbose_name='班级名称')),
                ('grade_major', models.CharField(blank=True, max_length=50, verbose_name='班级专业')),
            ],
            options={
                'verbose_name': '班级管理',
                'verbose_name_plural': '班级管理',
                'db_table': 'Grade_manage',
            },
        ),
        migrations.CreateModel(
            name='ImageUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='作业名称')),
                ('img', models.ImageField(upload_to='')),
                ('upload_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='上传时间')),
                ('upload_name', models.CharField(max_length=50, verbose_name='上传用户')),
            ],
            options={
                'verbose_name': '作业查看',
                'verbose_name_plural': '作业查看',
                'db_table': 'Login_ImageUpload',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=50, verbose_name='学生姓名')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='加入时间')),
                ('stu_chengji', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Login.chengji')),
                ('students_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Login.Grade')),
                ('students_home', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Login.ImageUpload')),
            ],
            options={
                'verbose_name': '学生管理',
                'verbose_name_plural': '学生管理',
                'db_table': 'Students_num',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=50, verbose_name='教师姓名')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='加入时间')),
                ('teacher_grade', models.ManyToManyField(to='Login.Grade')),
            ],
            options={
                'verbose_name': '老师管理',
                'verbose_name_plural': '老师管理',
                'db_table': 'Teachers_num',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='teacher_name',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='student',
            name='students_name',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='student',
            name='students_teacher',
            field=models.ManyToManyField(to='Login.Teacher'),
        ),
    ]
